@page "/"
@using Songlyrics.Data
@using System.Timers

<PageTitle>Guess The Song</PageTitle>

<Button @onclick="GetLyrics">Get Lyrics from a Random Track in Playlist</Button>

<input type="text" placeholder="playlistId" @bind-value="_playlist" @bind-value:event="oninput" @onkeyup="@OnValueChange2" />

<br/>
<br/>

<input type="text" placeholder="lyrics input" @bind-value="_inputValue" @bind-value:event="oninput" @onkeyup="@OnValueChange" />

<div class="counter">
    <span>@_amountOfMatched</span>/<span>@_lyrics.Length</span>
</div>

<div class="lyrics-grid">
    @foreach (string word in _lyrics)
    {
        <div class="lyrics-box">
            <div id="@word" class="@GetDivClass(word)">@word</div>
        </div>
    }
</div>

<div class="button-group">
    <button class="show-all-button" @onclick="ShowAllLyrics">Show All</button>
    <button class="clear-all-button" @onclick="ClearMatchedLyrics">Clear All</button>
</div>

<style>
    .lyrics-grid {
        display: grid;
        grid-template-columns: repeat(10, 1fr);
        grid-gap: 10px;
    }

    .lyrics-box {
        border: 1px solid #000;
        padding: 10px;
    }

    .matched {
        color: black;
    }

    .unmatched {
        color: white;
    }

    .counter {
        margin-top: 10px;
        text-align: right;
    }

    .button-group {
        margin-top: 20px;
        text-align: left;
    }

    .show-all-button,
    .clear-all-button {
        margin-right: 10px;
    }
</style>

@code {
    private string _inputValue = string.Empty;
    private string _playlist = string.Empty;
    private int _amountOfMatched = 0;
    private string[] _lyrics = Array.Empty<string>();
    private HashSet<string> _matchedLyrics = new();
    private bool _inputMatched;

    private bool IsMatch(string word)
    {
        return _inputValue.Equals(word, StringComparison.OrdinalIgnoreCase);
    }

    private void ProcessInput()
    {
        _inputMatched = CheckMatch();

        if (_inputMatched)
        {
            Task.Yield();
            _inputValue = "";
        }
    }

    private bool CheckMatch()
    {
        var matched = false;

        var unmatchedLyrics = _lyrics.Where(l => !_matchedLyrics.Contains(l)).ToList();

        foreach (var word in unmatchedLyrics)
        {
            if (IsMatch(word))
            {
                _matchedLyrics.Add(word);
                _amountOfMatched++;
                matched = true;
            }
        }

        return matched;
    }


    private string GetDivClass(string word)
    {
        return _matchedLyrics.Contains(word) ? "matched" : "unmatched";
    }

    private void ShowAllLyrics()
    {
        _matchedLyrics = new HashSet<string>(_lyrics);
        _amountOfMatched = _lyrics.Length;
    }

    private void ClearMatchedLyrics()
    {
        _matchedLyrics.Clear();
        _amountOfMatched = 0;
        _inputValue = "";
    }

    private async Task GetLyrics()
    {
        var spotifyClient = new SpotifyClient();
        _lyrics = await spotifyClient.GetLyricsFromARandomTrackInPlaylist(_playlist);
        _matchedLyrics = new HashSet<string>();
        _amountOfMatched = 0;
    }

    private void SaveInVariable(ChangeEventArgs e)
    {
        _playlist = e.Value!.ToString()!;
    }

    private Timer timerObj;
    private Timer timerObj2;

    protected override void OnInitialized()
    {
        timerObj = new Timer(150);
        timerObj.Elapsed += OnUserFinish;
        timerObj.AutoReset = false;
        timerObj2 = new Timer(150);
        timerObj2.Elapsed += OnUserFinish;
        timerObj2.AutoReset = false;
    }

    private void OnValueChange(KeyboardEventArgs e)
    {
    // remove previous one
        timerObj.Stop();
    // new timer
        timerObj.Start();
    }

    private void OnUserFinish(Object source, ElapsedEventArgs e)
    {
        InvokeAsync(() =>
        {
            ProcessInput();
            StateHasChanged();
        });
    }

    private void OnValueChange2(KeyboardEventArgs e)
    {
    // remove previous one
        timerObj2.Stop();
    // new timer
        timerObj2.Start();
    }

    private void OnUserFinish2(Object source, ElapsedEventArgs e)
    {
        InvokeAsync(() =>
        {
            ProcessInput();
            StateHasChanged();
        });
    }
}